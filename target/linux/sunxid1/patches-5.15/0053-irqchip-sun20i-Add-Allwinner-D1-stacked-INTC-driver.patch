From 41c15354d89edf12be64f19ababdaaee0cccaef2 Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Sun, 6 Jun 2021 10:58:08 -0500
Subject: [PATCH 053/124] irqchip/sun20i: Add Allwinner D1 stacked INTC driver

The D1 SoC uses the RISC-V PLIC as its main interrupt controller, but
the PLIC does not provide any interface for configuring IRQ trigger type
or wakeup capability. So Allwinner added registers in a separate MMIO
region (RISCV_CFG) to support these features.

Neither of those features is needed at the moment: most peripherals use
level interrupts, and RISC-V Linux does not yet support system suspend.
Plus, there are some complications with this extra MMIO region requiring
clocks/resets to access, which are not available during of_irq_init().

However, adding this irqchip later would be a compatibility-breaking
devicetree change, so at least a stub driver is needed for now.

Signed-off-by: Samuel Holland <samuel@sholland.org>
---
 drivers/irqchip/Kconfig      |  3 ++
 drivers/irqchip/Makefile     |  1 +
 drivers/irqchip/irq-sun20i.c | 95 ++++++++++++++++++++++++++++++++++++
 3 files changed, 99 insertions(+)
 create mode 100644 drivers/irqchip/irq-sun20i.c

diff --git a/drivers/irqchip/Kconfig b/drivers/irqchip/Kconfig
index aca7b595c4c7..ca982f2f6467 100644
--- a/drivers/irqchip/Kconfig
+++ b/drivers/irqchip/Kconfig
@@ -522,6 +522,9 @@ config SIFIVE_PLIC
 
 	   If you don't know what to do here, say Y.
 
+config SUN20I_INTC
+	bool
+
 config EXYNOS_IRQ_COMBINER
 	bool "Samsung Exynos IRQ combiner support" if COMPILE_TEST
 	depends on (ARCH_EXYNOS && ARM) || COMPILE_TEST
diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
index f88cbf36a9d2..ba1097e01991 100644
--- a/drivers/irqchip/Makefile
+++ b/drivers/irqchip/Makefile
@@ -98,6 +98,7 @@ obj-$(CONFIG_CSKY_MPINTC)		+= irq-csky-mpintc.o
 obj-$(CONFIG_CSKY_APB_INTC)		+= irq-csky-apb-intc.o
 obj-$(CONFIG_RISCV_INTC)		+= irq-riscv-intc.o
 obj-$(CONFIG_SIFIVE_PLIC)		+= irq-sifive-plic.o
+obj-$(CONFIG_SUN20I_INTC)		+= irq-sun20i.o
 obj-$(CONFIG_IMX_IRQSTEER)		+= irq-imx-irqsteer.o
 obj-$(CONFIG_IMX_INTMUX)		+= irq-imx-intmux.o
 obj-$(CONFIG_MADERA_IRQ)		+= irq-madera.o
diff --git a/drivers/irqchip/irq-sun20i.c b/drivers/irqchip/irq-sun20i.c
new file mode 100644
index 000000000000..ee1b81aa7ff7
--- /dev/null
+++ b/drivers/irqchip/irq-sun20i.c
@@ -0,0 +1,95 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Allwinner sun20i (D1) wakeup irqchip driver.
+ */
+
+#include <linux/bitmap.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/irqchip.h>
+#include <linux/irqdomain.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_irq.h>
+#include <linux/syscore_ops.h>
+
+#define SUN20I_HWIRQ_OFFSET		16
+#define SUN20I_NR_HWIRQS		160
+
+static struct irq_chip sun20i_intc_chip = {
+	.name			= "sun20i-intc",
+	.irq_mask		= irq_chip_mask_parent,
+	.irq_unmask		= irq_chip_unmask_parent,
+	.irq_eoi		= irq_chip_eoi_parent,
+	.irq_set_affinity	= irq_chip_set_affinity_parent,
+};
+
+static int sun20i_intc_domain_translate(struct irq_domain *domain,
+					struct irq_fwspec *fwspec,
+					unsigned long *hwirq,
+					unsigned int *type)
+{
+	if (fwspec->param_count < 2)
+		return -EINVAL;
+	if (fwspec->param[0] < SUN20I_HWIRQ_OFFSET)
+		return -EINVAL;
+
+	*hwirq = fwspec->param[0];
+	*type  = fwspec->param[1] & IRQ_TYPE_SENSE_MASK;
+
+	return 0;
+}
+
+static int sun20i_intc_domain_alloc(struct irq_domain *domain,
+				    unsigned int virq,
+				    unsigned int nr_irqs, void *arg)
+{
+	struct irq_fwspec *fwspec = arg;
+	unsigned long hwirq;
+	unsigned int type;
+	int i, ret;
+
+	ret = sun20i_intc_domain_translate(domain, fwspec, &hwirq, &type);
+	if (ret)
+		return ret;
+	if (hwirq + nr_irqs > SUN20I_HWIRQ_OFFSET + SUN20I_NR_HWIRQS)
+		return -EINVAL;
+
+	ret = irq_domain_alloc_irqs_parent(domain, virq, nr_irqs, fwspec);
+	if (ret)
+		return ret;
+
+	for (i = 0; i < nr_irqs; ++i, ++hwirq, ++virq)
+		irq_domain_set_hwirq_and_chip(domain, virq, hwirq,
+					      &sun20i_intc_chip, 0);
+
+	return 0;
+}
+
+static const struct irq_domain_ops sun20i_intc_domain_ops = {
+	.translate	= sun20i_intc_domain_translate,
+	.alloc		= sun20i_intc_domain_alloc,
+	.free		= irq_domain_free_irqs_common,
+};
+
+static int __init sun20i_intc_init(struct device_node *node,
+				   struct device_node *parent)
+{
+	struct irq_domain *domain, *parent_domain;
+
+	parent_domain = irq_find_host(parent);
+	if (!parent_domain) {
+		pr_err("%pOF: Failed to obtain parent domain\n", node);
+		return -ENXIO;
+	}
+
+	domain = irq_domain_add_hierarchy(parent_domain, 0, 0, node,
+					  &sun20i_intc_domain_ops, NULL);
+	if (!domain) {
+		pr_err("%pOF: Failed to allocate domain\n", node);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+IRQCHIP_DECLARE(sun20i_intc, "allwinner,sun20i-d1-intc", sun20i_intc_init);
-- 
2.20.1

